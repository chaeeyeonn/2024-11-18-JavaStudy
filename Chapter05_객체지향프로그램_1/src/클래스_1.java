/*
 *   객체지향 프로그램(재사용 => 유지보수)
 *     : 자바는 클래스로 시작, 클래스로 종료
 *       => 클래스를 여러 개(기능 분리)만들어서 서로 연관 관계가 있도록
 *       => 웹: 게시판, 공지사항, 장바구니,...
 *       
 *   1. 특징
 *      : 기존의 프로그램을 쉽게 제작
 *      : 코드의 재사용성이 높다(코드 변경, 코드 추가) => 상속/포함 클래스
 *      : 코드관리가 용이하다(메소드 => 구조화)
 *      : 이미 사용중인 프로그램을 변경 => 신뢰성이 높은 프로그램
 *      : 재사용(상속,포함), 신뢰성 => 에러가 거의 없다
 *        |변경, 기능 추가
 *   2. 클래스의 구성요소
 *      clasee ClassName
 *      {
 *        1) 변수: 프로그램에 필요한 데이터를 저장해서 사용
 *           : 한 개만 저장 가능
 *           : 기본형 / 배열 / 클래스
 *         - 변수의 종류
 *           : 인스턴스 변수: 객체 생성시마다 메모리에 따로 저장
 *                         String name; int age;...
 *           : 공유 변수: 모든 객체가 동시 사용 가능
 *                    : 한 번 변경되면 모든 객체가 동시 변경
 *                      static String name...
 *           : 지역 변수: 메소드 블록 안에서 선언되는 변수
 *             -------메소드 안 선언, 매개 변수
 *                    메소드 종료되면 자동으로 메모리 해제
 *                    생성 시점: 메소드 호출시
 *          ----------------------------------------
 *                    메모리 저장 시점     메모리 해제 시점
 *          인스턴스변수    객체생성          프로그램 종료시
 *                      new 생성자()     => Heap 영역 => 사용자 영역
 *           공유변수 컴파일시 자동 메모리 저장 프로그램 종료시
 *                                      => MethodArea영역
 *           지역변수    메소드 호출시       메소드 종료 => Stack => 메모리 자체 관리
 *          ----------------------------------------
 *        - 메모리 영역
 *           :MethodArea: method, static
 *           : Stack:지역 변수, 매개 변수
 *           : Heap: 배열, 인스턴스 변수...
 *          
 *        생성자 => 초기화블록  => 초기화
 *        ---- 초기화 시작하는 프로그램 => 생략 가능
 *             => 반드시 클래스명과 동일
 *             Scanner scan=new Scanner(System.in);
 *                             생성자는 반드시 호출시에 연락 => 주소접근 연산자
 *             : 초기화 블록 => 호출하지 않음 => 자동 수행
 *               단점: 상속의 예외 조건
 *               class ClassName
 *               {
 *                 {
 *                   인스턴스 블럭: 독자 사용 불가능 
 *                 }
 *                 {
 *                   int a;: 선언과 동시에 초기값
 *                   a=10;
 *                 }
 *               {
 *             ------------------------------------------------
 *             기능 => 메소드: 한 개의 기능을 수행
 *                    인스턴스 메소드: 따라 생성 => 따라 작동
 *                    static 메소드: 공유 => 한 개만 생성
 *                    추상 메소드: 선언 =? 필요시마다 구현
 *                              추상 클래스 / 인터페이스
 *                    -----------------------------수정 가능
 *                    종단 메소드 - 수정 불가능 => 사용빈도 낮음
 *                    ---------------------
 *                    String s1="Hello Java"
 *                    String s2="Hello Oracle"
 *                    s1.substring(6)
 *                    s2.substring(6)
 *                    
 *                    Math.random(): math static
 *               
 *          : 변수=> 명시적 초기화
 *          : 웹 => 자동로그인
 *                 Clss ClassName
 *                 {
 *                 
 *                    선언만 가능 => 구현 불가능
 *                 }
 *                 
 *           -------------------------------------------------
 *   3. 객체지향 3대특성
 *      1) 데이터 보호 목적: 캡슐화(데이터 은닉화, lombok)
 *      2) 재사용: 상속, 포함
 *               is-a  has-a
 *      3) 수정, 추가를 쉽게 만든다
 *         다형성 => 오버라이딩 / 오버로딩
 *   4. 접근지정어
 *      - public: 모든 클래스에서 사용 가능
 *      - protected: 같은 폴더 안에서만 접근 가능
 *                   상속받은 클래슨는 다른 폴더에서도 접근 가능
 *      - default: 같은 폴더에서만 접근 가능*****
 *      - private: 자신의 클래스에서만 접근 가능
 *   5. 초기화 => 변수
 *   6. 멤버메소드
 *   7. 메모리 할당
 *   -------------------------------------------------------
 *   8. 클래스 종류 => 어떤 프로그램에서 사용하는 지 알기 *****
 *               => 개념: 면접, 사용처(구현) *****
 *      **일반클래스
 *      추상클래스 => 보완 인터페이스
 *      내부클래스: 멤버 클래스 => 변수 / 메소드를 공유
 *               => 쓰레드, 네트워크
 *               class A => Server: 연결 담당
 *               {
 *                 class B => 통신 담당 => 쓰레드
 *                 {
 *                 }
 *               }
 *             : 익명의 클래스 => 상속없이 오버라이딩 할 경우
 *               => 빅데이터 데이터 분석
 *             : 지역 클래스 => 메소드 안에 클래스 선언 => 사용 빈도 없음
 *               class A
 *               {
 *                 public void aa()
 *                 {
 *                   class B
 *                   {
 *                   }
 *                 }
 *               }
 *              
 *   9. 예외처리: 사전 에러 방지, 비정상 종료를 방지
 *           - 예외 복구: try~catch
 *           - 예외 회피 throws Exception =>
 *           -
 *           반드시 예외처리해야 하는 클래스 / 생략 가능
 *           ------------------------  -------
 *           |컴파일시 확인               |실행시 확인
 *           |CheckException           |사용자 에러
 *           |개발자 에러
 *           교재 10장: 모든 클래스가 예외처리를 가지고 있다
 *                     java.io / java.sql / java.net
 *           예외: 소스상에서 수정이 가능한 에러
 *   =================5,6,7,8장(자바 문법)
 *   => 객체지향에 맞게 구현보다는 형식쪽에 먼저 몰입
 */
public class 클래스_1 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}

}
