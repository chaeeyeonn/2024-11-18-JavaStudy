package com.sist.main;
/*
 *   ***교재 5장
 * - 객체지향 프로그램: 하드웨어(집적회로 => 모방)
 *   ------------- 조립식(한 개 클래스 => 부품) => CBD
 *   => 이미 만들어진 클래스: 변경(요구사항) => 오버라이딩
 *   
 *   1. 목적: 재사용        ----오버로딩
 *           ----변경 가능, 추가 가능
 *              ----오버라이딩
 *              
 *   2. 신뢰성이 좋음: 검증 거침
 *   3. 대규모 프로젝트: 재사용
 *   4. 클래스 => 추상화 => 구체화
 *              -----설계 -----구현
 *              |공통적인 데이터나 기능 모아 설계
 *              
 *   순서
 *   1. 변수 설정: 기능(메소드에서 공통으로 사용되는 변수)
 *   
 *   변수 초기화 여부: 생성자 => 생략
 *   생성자: 윈도우, 데이터베이스, 서버 연결
 *   * 없는 경우 => 자동 생성(디폴트 생성)
 *   생성자: 여러 개 사용 가능 => 오버로딩
 *         => 클래스명 동일(리턴형이 없음)
 *            => **void도 리턴형임
 *         => 다른 클래스에서 사용 가능
 *   ------------------------------------
 *   기능 처리 => 메소드: 다른 클래스와 통신 담당 => public 기본
 *   형식)
 *       [접근지정어][제어어] 리턴형 메소드명(매개변수)
 *       {
 *          return 값
 *       }
 *       리턴형 => 처리한 결과값: 한 개 설정
 *               기본형 / 배열 / 클래스
 *       매개변수 => 사용자가 보내준 값
 *       -------------------------
 *       여러 개 사용 가능 => 가급적 3개 이상이면 배열 / 클래스 이용
 *       => 호출
 *          인스턴스
 *            객체 생성 후 처리
 *            객체.메소드(값)
 *           static
 *            클래스명.메소드()
 *       *** 인스턴스 메소드, 생성자
 *           => 인스턴스 변수, 인스턴스 메소드, static 변수, static 메소드 사용 가능
 *       *** static 메소드, static 블록
 *           => static 변수, static 메소드 사용 가능
 *           => 인스턴스 사용시에는 반드시 객체 생성 후 사용
 *           => 제약 多: 공통 사용 : 한글 변환
 *           
 *   접근지정어
 *     public: 모든 클래스 사용 가능 => 클래스 / 생성자 / 메소드
 *     protected: 같은 패키지 안, 다른 패키지 안에 상속 받은 클래스
 *     default: 같은 패키지 안 => Component 사용시 주로 사용
 *            : 윈도우 => Container: JFrame, JPanel, ...
 *                 => Component: Button, TextField, ...
 *     private: 개인정보 보호
 *              일반 멤버변수: private => getter / setter => 캡슐화
 *            
 *   제어어
 *     static: 공통 사용
 *     abstract: 추상 => 구현 x
 *              => 버튼 / 마우스 / 키보드 ...
 *              => 알아서 프로그램에 맞게 구현하여 사용
 *              => 인터페이스
 *     final: 마지막
 *            변수 => 상수
 *            메소드 => 종단 메소드
 *            클래스 => 종단 클래스 => 표준화
 *            ==> 확장 불가능(상속x)
 *   ===========================================================
 *   객체 지향의 3대 특성(권장사항)
 *     1. 캡슐화: 데이터 보호
 *     2. 상속: 재사용
 *     3. 다형성: 변경, 추가 => 구현
 *   
 */
public class 정리_6장 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}

}
