package com.sist.main;
/*
 *   교재 7장 => 클래스 종류(추상클래스/인터페이스)
 *          => 형식, 사용처
 *    
 *   추상클래스: 구현이 안 된 메소드를 가지고 있다
 *          : 객체를 직접 생성 불가능
 *          : 사용시에는 상속을 받은 하위 클래스에서 확장해서 사용
 *    - 역할 / 필요성
 *          : 상속을 통해서 코드를 재사용 => 강제로 메소드 구현을 하는 역할 => 확장성 / 유지보수 용이
 *                                                             => 상속을 받아 오버라이딩(기능 변경) 기법 사용
 *    - 형식)
 *           public abstract class ClassName
 *           {
 *             변수: 멤버변수(인스턴스 변수) / 정적변수(static 변수)
 *             생성자: 변수 초기화
 *             구현 메소드: 필요시에만 오버라이딩 / 불필요시 있는 그대로 사용 가능
 *             미구현 메소드: 상속시 강제로 구현
 *           }
 *           ==> 관련 있는 클래스 여러 개를 모아 관리
 *               -------기능이 비슷한
 *               => 웹(**Model => 사용자 요청 처리 => 결과값을 브라우저로 전송)
 *               => 소스가 간결해짐 (조건문 없이 사용 가능)
 *               => Map 클래스 이용해서 클래스를 싱글턴으로 처리
 *                 ---------메모리 절약
 *                 
 *   인터페이스: 추상클래스 단점 보완한 클래스 일종
 *   --------java에서 객체가 어떻게 행동(동작)해야하는 가 정의한 타입
 *           : 주로 메소드만 사용
 *           : 기능 설계
 *           : 사전적 의미: 결합성, 접속기
 *                       ----- -----리모콘
 *                       서로 다른 클래스 연결 사용
 *                   => 컴퓨터와 사용자간의 통신 => API(Application Interface)
 *     - 장점
 *           : 코드의 표준화: 같은 메소드를 사용 => 내용 구현은 다를 수 있음
 *           : 설계만 되어 있음 => 프로그래머가 구현해서 사용
 *             ------------각자 프로그램에 맞춰 구현
 *           : 다른 클래스와 연결시 편리
 *           : 결합성 낮게 만듦
 *           : 다중 상속 가능
 *           : ***** 소스의 통일화 => 분석이 쉬움
 *                  -----------FrameWork(형식이 동일) => 스프링 / Jquery / VueJS / React
 *           : 독립적 사용 가능(원격): ServerSocket / Socket
 *           : 유지보수 쉬움
 *           : 여러 개 클래스 모아 관리(한 개의 객체명으로 제어)
 *    - 형식) => 모든 구성요소가 only public
 *           => 기능 수정 가능
 *           public interface interface명
 *           {
 *             변수 => 상수형 변수만 사용, 생략 가능
 *             (public static final) 데이터형 변수
 *             구현이 안 된 메소드
 *             (public abstract) 리턴형 메소드명(매개변수)
 *             ------------------------------------
 *             JDK 1.5 추가 => 개발자가 요청
 *             구현이 된 메소드 추가
 *             default 리턴형 메소드(매개변수)
 *             {
 *             }
 *             static 리턴형 메소드(매개변수)
 *             {
 *             }
 *           }
 *    *** 컴파일러가 자동 추가하는 소스
 *    1) import java.lang.*; => 생략
 *              -----------String, System, ...
 *    2) 모든 클래스는 Object 상속
 *       --------
 *       사용자 정의
 *       라이브러리
 *       public class ClassName extends Object
 *    3) 메소드 => void => return 생략시
 *       public void display()
 *       {
 *         return; => 생략
 *         ------메소드의 종료
 *       }
 *    4) 인터페이스
 *       변수 => (public static final)
 *       메소드 => (public abstract)
 *       default => (public)
 *       static => (public)
 *       
 *   추상클래스
 *     상속 => 단일 상속만 가능 => 확장(extends)
 *   인터페이스
 *     상속 => 다중 상속 가능 =< 메소드 구현(implements)
 *     
 *              extends
 *   => 인터페이스 ===> 인터페이스
 *              implements
 *      인터페이스 ===> 클래스
 *      (클래스 ===> 인터페이스는 존재 x)
 *   => 다중 상속 => 윈도우 / 네트워크
 *      => 웹에서는 주로 단일 상속
 *      interface A
 *      interface B
 *      
 *      class C implements A,B
 *                         ----다중 상속
 *                         
 *      *** 관련된 클래스 여러 개를 묶어서 인터페이스 1개 제어 
 *          => 소스 간결
 *               
 */
public class 정리_1 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}

}
