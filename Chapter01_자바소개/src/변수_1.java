/*
 *  프로그램 작성법
 *  아이템 구성 => 벤치마킹 => 요구사항 분석(데이터, 기능)
 *  => 데이터베이스 설계 => 화면 UI => 기능 구현 => 테스트 => 배포
 *  1. 프로그램에 필요한 데이터 저장
 *     => 한 개씩 메모리에 저장: 변수(메모리에 저장되는 공간의 이름) => 모든 프로그램에 변수가 없는 프로그램은 존재하지 않음
 *                                                         프로그램: 변수/연산자/제어문의 합치, 다른 것은 관련된 내용을 묶어서 사용할 뿐
 *                                                                 (입력/처리/결과 => 메소드) => 클래스
 *     변수 읽기(데이터 가져오기), 쓰기(데이터 저장) => 수정 가능, RAM에 저장(프로그램 종료시 사라짐)
 *     메모리 하나는 4byte, 이보다 큰 것이 들어가려면 메모리가 알아서 나뉘어짐 => 데이터형
 *     메모리 종류
 *     bit(0. 1을 채워주는 역할) -> byte
 *     1byte = 8bit => 127까지만 가능
 *     부호비트(1byte를 8개 쪼갰을 때 그 중 하나/ 1: 음수. 0: 양수 => 01111111가 가장 큰 수 => 이진법 사용시 이는 127이다)
 *     2byte = 16bit => 부호비트와 이진법 계산하면 32767까지 가능
 *     4byte = 32bit => 21억 4천
 *     8byte = 62bit => 2^63
 *     ex) 100을 저장한다면? 4byte가 제일 나음. 왜? 1,2byte에 저장하려면 4byte짜리를 더 나눠야 하니 속도가 느려짐
 *    - JAVA에서 지원하는 기본형 / 데이터형 / 자료형 => 저장할 메모리 크기 생성 => 이후 별칭을 변수로 설정
 *    1) 정수 저장
 *       1byte: byte => 파일 읽기, 네트워크 전송
 *         저장 범위: -128 ~ 127
 *       2byte: short => C언어 호환 문제(거의 사용 빈도 없음)
 *         저장 범위: -32768 ~ 32767
 *       4byte: int => 기본: 컴퓨터는 모든 정수는 int로 인식함, 정수의 디폴트
 *         저장 범위: -21억 4천 ~ 21억 4천
 *       8byte: long => 금융권/증권/ 공기업, long값에 해당하는 정수여도 컴퓨터는 모든 정수를 int로 인식하기 때문에 정수에 long 함수를 붙여야 함
 *    2) 실수 저장
 *       float: 4byte => 소수점: 6자리
 *       double: 8byte => 소수점: 15자리, 컴퓨터에서 디폴트 => 모든 실수는 double로 인식
 *    3) 문자 저장
 *       char: 2byte(멀티바이트=> Unicode) , 0 ~ 65535
 *       (1byte => 싱글바이트 => ASC, 0 ~ 255문자만 사용 가능 => C, C++ / 브라우저: C / 한글은 2byte라서 브라우저에서 한글은 깨지는 경우가 있음)
 *    4) 논리(true/false): 1byte
 *       true: 1 / false: 0
 *    ** 자바 기본형 **
 *    ===============================
 *          정수   실수   문자   논리
 *    ===============================
 *    1byte ***byte        ***boolean
 *          -128~127       true/false
 *    ===============================
 *    2byte short       ***char(:String으로 교체되기 쉬울듯)
 *         -32768~32767 0~65535
 *    ===============================
 *    4byte ***int  float(6자리)
 *          -21억4천~21억4천
 *    ===============================
 *    8byte ***long  ***double(15자리)
 *          2^63
 *    ===============================
 *    *구분
 *     int/long => 숫자(l,L)
 *     float/double => 실수(f,F) / 10.5D일 경우 D는 디폴트이므로 생략 가능
 *     
 *    - 데이터형 크기
 *     byte < short, char < int < long < float < double(byte 크기가 아닌 실제 숫자로 결정) 
 *     큰 데이터형 => 작은 데이터형값 받을 수 있음
 *     작은 데이터형 => 큰 데이터형값 받을 수 없음
 *     long = int(o) / int = long(x)
 *     double = int(o)
 *     
 *    만약 12byte를 저장하고 싶으면? 4byte+8byte => 데이터 모음 => 클래스
 *  2. 저장된 데이터 활용
 *  3. 결과물 출력
 *  
 *  - 변수
 *    1. 선언값을 줘야함
 *       (데이터형 변수명;)
 *    2. 초기값을 설정
 *       (변수명=값)
 *    3. 변경 가능
 *       (변수명=값)
 *    4. 출력
 *       (System.out.println(변수명))
 *     
 *  - 변수를 만드는 방법
 *    1. 알파벳이나 한글로 시작
 *       단, 알파벳 대소문자 구분
 *    2. 숫자 사용 가능(앞에 사용은 불가능 ex: 1a(x), a1, a2...(o))
 *    3. 특수문자 사용 가능(_ , $) => 주로 _ 사용 => 단어가 두 개 붙어있을 때 (_kor: 임시 변수)
 *    4. 키워드는 사용 불가
 *       -> 자바에서 사용하는 단어 (ex: int int(x))
 *    5. 공백 사용 불가(ex: file name(x))
 *    6. 문법(x) => 변수는 소문자로 시작한다
 *    7. 문자의 길이는 상관없으나 보통 3~7글자
 *    8. 데이터 저장 (변수)부터 생각
 *    
 *  - 변수 선언 방식
 *    int a;
 *    int b;
 *    int c;
 *    int d;
 *    = int a,b,c,d,e
 *    변수: 메모리 저장 공간 => 변경 가능
 */
public class 변수_1 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
        byte b=(byte)280;
        // byte값은 127까지. 오버플로우 되니 280을 byte값으로 바꾼다고 명령
        System.out.println(b); //값이 24 나옴
        // 이진법으로 계산할 때 범위를 벗어났으니 뒤에서 8개(1byte=8bit) 중 1의 값(2의 배수를 나열해서 280이 나오는 값들이 1)을 더함(8+16)
	}

}
