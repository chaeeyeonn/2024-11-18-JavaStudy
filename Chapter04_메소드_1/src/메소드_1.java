/*
 * 1. 객체지향 프로그램
 *  : 기능별 분리해서 클래스와 클래스간의 연결, 처리
 *    => 조립식
 *    
 *    => 클래스
 *    1) 사용자 정의 데이터형 => 데이터형 클래스
 *                          : 관련된 데이터를 모아서 관리
 *                          : ~VO, ~DTO
 *    2) 한 개의 기능(메소드) => 액션 클래스
 *                          : 데이터를 활용하는 메소드
 *                          : ~DAO, ~Model
 *                          
 *    (JSP 사라지는 경향
 *     Front: VueJS(소규모), ReactJS(대규모) ==> NextJS로 변경
 *     Back: Spring-Boot) 
 *    class ClassName
 *    {
 *     구성요소
 *     ------
 *     **변수: 멤버변수, 공유변수 => 다른 클래스에서 사용 가능
 *       기본형(정수, 실수, 논리, 문자, 문자열, 배열)
 *     생성자: 멤버변수에 대한 초기화, 시작과 동시에 처리
 *           => 자동 로그인, 데이터베이스 연결, 서버연결, 메모리 저장
 *     **기능 설계 => 메소드
 *     }
 *     
 * 2. 메소드
 *    : 한 개의 기능을 수행하는 명령문의 집합
 *      ---------=> 조립: process()
 *               => main에서 코딩을 하지 않는다
 *                  ----process()만 호출
 *                 : 로그인 처리, 회원 가입, 회원 수정, 회원 탈퇴....
 *                 : 목록, 글쓰기, 상세보기, 수정, 삭제, 검색...
 *   ==> 반복적인 문장이 있는 경우(반복 제거)
 *      ex) 오라클 연결 -> 목록 읽기 기능/ 오라클 연결, 목록 읽기, 오라클 닫기/
 *                                -> 글쓰기, 오라클 연결, 
 *   ==> 명령문을 기능별 분리 => 단락을 나눠 서리
 *       = 가독성(소스 간결), 유지보수(수정 용이),
 *         재사용(어떤 클래스에도 필요시마다 호출 가능, 최적화
 *     데이터 저장 => 저장된 데이터 가공
 *         |            |
 *                    연산자 / 제어문
 *                    -----------
 *                    묶어서 정리 => 메소드
 *         변수 ,배열
 *         
 *   - 메소드 사용(호출): 호출되면 메소드 처음부터 수행 => 호출된 위치로 복귀
 *   - 구성요소
 *     1) 결과값: 사용자 요청에 따라 결과값 추출(리턴형)
 *     2) 사용자 요청: 매개변수
 *         ex) 로그인 => id,pwd / 더하기 => 정수, 정수 ...
 *     3) 메소드명 => 기능에 맞게 이름 부여
 *                    => plus(), minus()
 *                    => 변수 식별자와 동일
 *                        ㄱ) 알파벳, 한글 => 대소문자 구분
 *                        ㄴ) 숫자 사용 가능 => 맨 앞 사용 불가
 *                        ㄷ) 키워드 사용 불가
 *                        ㄹ) 특수문자 사용 => $, _
 *                        ㅁ) 공백 사용 불가
 *                        ㅂ) 소문자로 시작 => 문법 사항은 아님
 *                        
 *   - 메소드 형식: 선언부 / 구현부
 *                  |자동메모리저장 |종단  |선언만
 *               ---static/final/abstract
 *                                -------여러 개 사용가능
 *     [접근지정어][옵션] 리턴형 메소드명(매개변수...) ==> 선언부
 *     ---------      -----기본형/배열/클래스 => 결과값은 반드시 1개
 *     public/private/protected/default - 같은 폴더
 *     |모든클래스  |자신클래스   |같은 폴더, 상속
 *     {
 *       구현부
 *       return 값 => 결과값
 *     }
 *     
 *   - 리턴형    |    매개변수
 *      o              o
 *    String substring(int begin)
 *    ------           ---------
 *      o              x
 *    double        random()
 *    ------              --
 *      x              o
 *    void       println(String s)
 *    ----               --------
 *      x              x     ==> 사용빈도는 거의 없다
 *    void System.out.println()
 *    
 *    마지막 두 유형: 메소드 자체에서 출력
 *    
 *    출력 방법
 *    => 결과값을 받아서 출력
 *    => 메소드 안에서 출력
 *    
 *    => return: void는 생략 가능
 *      
 *   
 */
/*
 *   자동 생성
 *   => import java.lang.*; => String, System ...
 *   => 메소드: void일 경우 생략하면 자동 첨부
 *   
 *   메소드는 반드시 호출해야 사용 가능
 *   void display()
 *   int display()
 *   int display(int a)
 *   void display(int a,int b)
 *   
 *   public static void main(String[] arg)
 *   {
 *     display();
 *     
 *     int a=display();
 *     
 *     int a=display(10);
 *     
 *     display(10,20);
 *   }
 */
public class 메소드_1 {
    // 리턴형,매개변수 모두 x
	// #=> 메소드 안에서 구구단 출력
	static void gugudan()
	{
		//void => 메소드 안에서 출력하겠다 => 전체 처리
		for(int i=1;i<=9;i++)//줄수
		{
			for(int j=2;j<=9;j++)//단 출력
			{
				System.out.printf("%2d * %2d = %2d\t",j,i,j*i);
			}
			System.out.println();
		}
	}
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		gugudan();//메소드 호출
		return; //컴파일시 return이 없는 경우 자동으로 생성
		//return => 메소드 종료

	}

}
