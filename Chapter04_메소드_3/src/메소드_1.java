/*   공부
 *   1. 형식 / 문법
 *   2. 간단한 예제 => 흐름(동작 방법 => 호출)
 *   3. 약간의 응용 => 확장
 *   4. 감잡기
 *   -----------------------------------
 *   데이터 저장
 *     - 변수: 한 개 데이터 저장
 *     - 배열: 여러 개를 연속적으로 저장, index이용 => 고정적 / 같은 데이터형
 *     - 클래스: 여러 개 데이터 저장 => 다른 데이터형 => 동적(new)
 *     ---------------------------------메모리에 저장
 *     - 파일: 종속적(파일간 연결 어려움)
 *     - RDBMS(오라클)
 *     ---------------------------------
 *   사용자 요청에 따른 처리
 *     - 연산자
 *     - 제어문
 *     ---------------관련된 명령문(기능을 모아 처리) => 메소드
 *   사용자 요청한 위치에 처리 결과 출력
 *     - 브라우저 출력(웹)
 *     ---------------------------------
 *   
 *   일반 자바 => 오라클 연결 자바 => 웹 연결 자바
 *   ===> 통합: 스프링
 *   
 *   메소드: 결과값(리턴형), 사용자 요청값(매개변수)
 *         -----------  -----------------
 *         1개만 가능      제한 없음
 *         return 값     => 매개변수를 많이 사용하면 묶어서 설정
 *         (java,C)             method(int a,int b,int c,...)
 *         (Python: 여러 개 가능)   => method(int[] arr)
 *         return 값,값,값...     method(int a,String b,double c,...)
 *         변수,변수,변수=메소드      => method(A a)(클래스 이용)
 *         
 *         => 프로그램
 *            기본
 *              - 입력
 *              - 요청 처리
 *              - 출력
 *            => 모든 메소드는 한 개의 기능만 수행
 *            => 유지보수(=> 가독성 중요)
 *            
 *            변경이 없는 final
 *            선언만 abstract
 *            자동 저장 static => 공유
 *   형식)         ---        -------기능별 구분자 => 메소드명 동일x
 *                                  문법은 변수 식별자와 동일 / 메소드는 소문자
 *     [접근지정어] [옵션] 리턴형 메소드명(매개변수)     => 기능 같지만 처리 다르면
 *     ---------       -----처리 결과값           => 같은 메소드명(오버로딩)
 *     default         기본형,배열,클래스           
 *     => 같은 폴더에 존재   => 1개만 가능
 *        -------패키지
 *        
 *   경우의 수
 *        리턴형          매개변수
 *         0               0
 *      String          substring(ine begin)
 *         0               X
 *      String            trim() -> 좌우 공배 제거
 *      double           random() => 0.0~ 0.99
 *         x               0
 *         void System.our.pirntln() => (String s)
 *         x               x
 *         void System.out.println() => <br>
 *       다음 줄에 출력한다
 *   -----------------------------------------------
 *   
 *   메소드 호출
 *     메소드명(전송하는 값) => void
 *     데이터형 변수=메소드명(전송하는 겂)
 *     ==> 왼쪽에 있는 데이터형이 크거나 같다 => 권장(되도록 같은 데이어형)
 *     => 통계 / 회계
 *     
 *  메소드 제작
 *  1) 반복이 많은 경우
 *  2) 기능별로 나눠 처리 => 단락
 *  3) 다른 클래스와 연결
 *  ------------------------------
 *  메소드 사용 목적
 *  1) 반복 제거
 *  2) 코드 관리가 쉽게(소스를 간결)
 *  3) 재사용
 *  
 *  메소드 호출 =>  실행순서
 *  중간 display => 해당 데이터 건너뜀
 *  마지막 display => 처음부터 마지막까지 뜀
 *       
 *   
 */
public class 메소드_1 {
    static void display()
    {
    	int i=1;
    	System.out.println("i="+i);
    	i++;// 지역변수이기때문에 해당 {}안에서만 사용가능
    	// {}이 종료되면 자동으로 메모리에서 사라짐
    }
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		System.out.println("main start");
		display();
		display();
		display();
		display();
		display();
		System.out.println("main end");

	}

}
