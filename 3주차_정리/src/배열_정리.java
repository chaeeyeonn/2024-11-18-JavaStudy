/*
 *   자바(서버 연결) / 자바스크립트(브라우저)
 *   
 *   데이터 저장: 변수 => 데이터형
 *                     | 정수: byte/int/long
 *                     | 실수: double
 *                     | 논리: boolean
 *                     | 문자: char
 *                     | 문자열: String
 *   데이터 가공: 연산자/제어문
 *      1. 연산자
 *        - 단항연산자
 *           : 증감연산자 (++, --)
 *           : 부정연산자 (!)
 *           : 형변환연산자 => 클래스형변환
 *                          ---------
 *                       => 상속/포함/라이브러리
 *             => UpCasting / DownCasting
 *                |자동형변환    |강제형변환
 *               long a=10;       int a=10.5;
 *                      ---int=> 10L    -----double => (int)10.5
 *                같은 데이터형끼리만 연산처리
 *                10.5+10 => 10.5+10.0=20.5
 *            *** char는 자동으로 int 변환
 *        - 이항연산자
 *           : 산술연산자: +, -, *, /, %
 *             산술규칙
 *             1) 자동으로 같은 데이터형으로 변경 후 처리
 *             2) int이하: char, short, byte => 결과값 int
 *             3) +: 산술(더하기)
 *                   문자열 결합용
 *                   7+7+"7"+7+7
 *                   14+"7"+7+7
 *                   "147"+7+7
 *                   "14777"
 *                /: 나누기
 *                   정수/정수=정수, 0으로 나눌 수 없다
 *                %: 실제 결과값은 좌항 부호를 따라간다
 *          --------------------------------------------
 *          : 비교연산자: ==, !=, <, >, <=. >=
 *                     -------
 *                     JS: ===, !==
 *                     오라클: =,<>
 *                     JSP: eq, ne => EL
 *          : 논리연산자: &&, || => 다중조건
 *          --------------------------------------------if문 조건문
 *          : 대입연산자: =, +=, -=
 *                     a+= ==> a=a+10
 *        - 삼항연산자 => 웹(JSP => HTML+Java)
 *                     ====================
 *                     | HTML / Java => 분리 ==> MVC
 *                 : 조건?값1:값2
 *                   => true면 값1, false면 값2
 *                   => *** 이전페이지/다음페이지
 *                  ==> 웹 핵심: 사용자 편리성
 *                  
 *      2. 조건문
 *        - 조건문
 *          : 단일조건문: 조건이 true일 경우에만 처리
 *                     if(조건문) => 부정연산자, 비교연산자, 논리연산자
 *                     {
 *                       조건이 true일 때 처리 문장
 *                     }
 *                     => 독립문장 => 속도가 느릴 수 있다
 *          : 선택조건문: 조건 true/ false일 경우 나눠서 처리
 *                     => 웹에서 가장 많이 사용 => 웹은 무조건 결과값을 전송해야 함
 *                     if(조건문)
 *                     {
 *                       조건 true일 때 처리 문장
 *                     }
 *                     if(조건문)
 *                     {
 *                       조건 false일 떄 처리 문장
 *                     }
 *                     *** 자바에 사용자 요청 처리
 *                              ============= 메소드
 *                         처리결과를 브라우저로 전송 => 리턴형 항상 존재
 *                     
 *        - 반복문
 *          : for: 반복 횟수 지정
 *                           |false일 때 종료
 *                 for(초기값;조건식;증감식)
 *                 {
 *                   반복 수행 문장
 *                 }
 *                 => 화면 출력: for-each
 *                 for(데이터형 변수:배열(컬렉션))
 *                                ---------데이터 여러 개 저장
 *                 => 저장된 데이터를 1개씩 읽어온다
 *          : 일차 for / 이자 for
 *                for(초기값;조건식;증감식)
 *                {
 *                  for(초기값;조건식;증감식)
 *                  {
 *                  
 *                  }
 *                }  
 *          : while:무한 루프, 반복 횟수를 모르는 경우 => 파일읽기/데이터베이스 연결
 *                  초기값
 *                  while(조건식)
 *                  {
 *                    반복문
 *                    증가식
 *                  }
 *        - 반복제어문
 *          : break: 반복문 종료 => 프로그램 종료: System.exit(0)
 *                                                      --- 0은 정상 종료
 *                                                          아니라면 비정상 종료
 *          : System.out.println(): 정상 출력
 *          : System.err.println(): 에러 출력 => 빨간색
 *        -----------------------------------------------------------------------
 *        
 *  배열: 데이터를 묶어서 사용
 *       변수명이 여러 개 있는 경우 => 제어가 어렵다, 제어문 사용에 문제 발생, 반복문 사용
 *       => 관련된 데이터: 
 *       => 한 개 이름으로 여러 개 제어
 *       => 변수
 *       => 클래스 여러 개(한 개 이름으로 제어 => 인터페이스)
 *    ex) Board: 글쓰기, 목록, 상세보기, 수정, 찾기, 삭제,... => 메소드
 *        -----클래스
 *        - 일차배열
 *          : 선언
 *               데이터형[] 배열명; => 권장
 *               데이터형 배열명[]; => C언어 호환
 *          : 초기값 설정
 *            => 명시적 초기화
 *               int[] arr={1,2,3};
 *            => 기본값 초기화
 *               int[] arr=new int[5]; => 0으로 초기화(***********)
 *                        -----
 *                        String => null
 *                        int => 0
 *                        double => 0.0
 *                        boolean => false
 *            => 선언 후 초기화
 *               int[] arr;
 *               arr=new int[]{1,2,3};
 *          ** 연속적으로 메모리 저장 => 메모리 크기가 동일 => 같은 데이터형만 모아서 관리
 *                               => 한 번 설정하면 변경 불가능 => 고정적
 *                                                       => 가변형 배열 => 클래스형(Collection)
 *                                                       ArrayList / Map / Set
 *          ** int[] arr=new int[5]; => 연속적인 5개의 메모리 생성, 해당 메모리 주소를 arr에 전송
 *             => ** 인덱스 0부터 순차적인 메모리 => 반복문 사용 용이
 *             => arr[0]: 일반 변수와 동일
 *          : 데이터 수정 / 데이터 출력
 *             => 값 변경/초기값: 일반 for문 이용 => index이용
 *             => 값 일기: for-each 주로 사용 => 실제 배열에 저장된 값 읽기
 *             => 개수: 배열명.length  => for(;i<배열명.length)
 *             => 배열의 크기를 벗어나면 오류 발생
 *          
 *  문자열: 문자를 여러 개 사용하는 부분
 *  
 *  메소드: 관련된 명령문을 묶어서 사용 => 한 개 기능을 만들어 재사용
 *        - 종류
 *          1. 사용자 정의 메소드
 *             1) 특정 작업을 하기 위한 명령문의 집합
 *                                 ----- ; => 명령문
 *                                 int a=10; => 4byte 메모리 하나에 10을 저장하라
 *                ==> 기능 처리
 *                    => 권장 사항: 한 번에 한 가지 기능만 처리
 *                    => 재사용, 유지보수(수정이 가능) => 오버라이딩(추가 => 오버로딩)
 *                ** 형상 관리: GIT(공통 프로젝트 시행시 => 협업)
 *             2) 메소드 사용 목적
 *                : 반복되는 기능 제거
 *                : 편리한 코드 관리 => 기능별로 나눠서 처리
 *                  => 입력 / 처리 / 출력
 *                : 소스 간결하게 제작
 *                : 다른 클래스와 연결
 *                : 재사용률 향상
 *             3) 메소드 종류
 *                : ***공통 메소드 => 자동으로 메모리에 저장(static)
 *                : 인스턴스 메소드 => 메모리마다 따로 저장(new)
 *                : 추상 메소드 => 선언만 하여 필요시마다 구현(설계단에서 주로 사용)
 *             4) 메소드 만드는 방법
 *                [접근지정어][옵션] 리턴형 메소드명(매개변수)
 *                {
 *                }
 *                : 리턴형: 사용자 요청시 처리된 결과값
 *                        ---------------------
 *                        결과값이 있는 경우: 기본형/배열/클래스
 *                        결과값이 없는 경우: 메소드 자체 처리 => void
 *                        ** 결과값은 무조건 1개만 사용 가능
 *                        int 메소드명()
 *                        --- 기본형
 *                        int[] 메소드명()
 *                        ----- 배열
 *                        String 메소드명()
 *                        ------클래스
 *                        void 메소드명
 *                        ----결과값이 없는 경우
 *                        => System.out.println()
 *                : 메소드명: 변수 식별자
 *                          알파벳, 한글 시작 / 알파벳은 대소문자 구분
 *                          숫자는 사용 / 앞에서는 사용 금지
 *                          공백 사용 불가
 *                          키워드 사용 불가
 *                          특수문자 ($, _)
 *                          *** 소문자 시작
 *                          *** 구분자 => 메소드명은 한 개만(중복 지양)...
 *                          약간의 의미만 부여
 *                          *** 7~15자 정도
 *                : 매개변수: 여러 개 사용 가능, 없는 경우도 있음
 *                          => 가급적 3개 이상이면 클래스/ 배열 사용ㅣ 
 *                          => 사용자 요청 값
 *            5) return 사용법
 *               ------리턴형이 있는 경우엔 반드시 return 값
 *                     리턴형이 없는 경우엔 return 생략 가능
 *                     => 자동 컴파일러에 의해 자동 추가
 *                  *** 반드시 리턴 사용@
 *                  
 *                  ***return문을 항상 마지막에  코딩하는 것은 아님
 *            6) 메소드
 *               1) 동작과정(행위)
 *               2) 화면에 출력하는 내용: 리턴형
 *               3) 사용자에게 유도: 매개변수      
 *               메소드 유형
 *               로그인 ==> boolean isLogin(String id,String pwd)
 *               목록 ==> String[] movieList
 *               상세 보기 ==> String movieDetail(int movieNo)
 *               => 리턴형, 매개변수가 없는 경우는 거의 없다         

 *          2. 라이브러리에 제공한 메소드(API) => 이후 API 이용
 *             (mvnrepository.com)
 *  ----------------------------+클래스 => 패키지 => 라이브러리
 */
public class 배열_정리 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}

}
