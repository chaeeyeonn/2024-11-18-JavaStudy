//교재127page
/*
 *   1. 주의점
 *     1) static 메소드에서는 인스턴스 변수, 인스턴스 메소드를 사용할 수 없다
 *        => 사용시, 객체 생성 후 사용 가능
 *     2) static 메소드, static 변수는 this를 사용할 수 없다
 *     3) static 블록은 static 변수만 초기화 가능하다
 *     4) 인스턴스 메소드에서는 인스턴스 변수, static 변수 모두 사용 가능하다
 *     5) 초기화에는 생성자를 주로 이용한다 => static, 인스턴스, this 모두 사용 가능
 *     
 *   2. 접근 지정어: 객체 사용 범위 지정
 *     => 멤버 변수에 사용: 다른 클래스에서 사용 가능하기 때문
 *        [접근지정어] 데이터형 변수명
 *        [접근지정어] [제어어] 리턴형 메소드명(매개변수)
 *     => 지역 변수는 불가: 메소드 안에서만 사용하기 때문 => final만 가능
 *     
 *     접근지정어             적용대상               접근 가능 대상              접근 불가 대상
 *     ----------------------------------------------------------------------------------
 *     클래스, 멤버변수,메소드
 *     public              클래스, 필드(멤버변수)    모든 대상                  x
 *                         생성자, 메소드
 *     protected           멤버변수, 생성자         같은 폴더(패키지)            다른 패키지  
 *                         메소드                 또는 상속받은 클래스 
 *                                               => 다른 폴더에 있는 경우
 *     default             클래스, 멤버변수         같은 폴더                   다른 폴더
 *                         생성자, 메소드
 *     private             멤버변수, 생성자         자신의 클래스 내부            클래스 외부
 *                         메소드
 *                         
 *      - 크기
 *        private < default < protected < public
 *        |오버라이딩 => 접근지정어 처리
 *         => 접근지정어 확장은 가능하지만 클래스 축소는 불가능                 
 *    *** 활용 높음
 *        : 멤버 변수 => 은닉화 private
 *        : 생성자, 클래스, 메소드 => 모든 클래스 연결: public
 *          -----------------다른 클래스에서 사용
 *                           --------=> 다른 폴더에 존재 가능
 *                           
 *      - 제어어
 *        : static : 공통적으로 사용되는 메소드 / 변수
 *        : abstract: 추상적인 => 공통기능 / 클래스, 메소드 / 기능 설계 ==> CRUD(Create Read Update Delete) => 추상클래스, 인터페이스 => 구현 X
 *                                                    -------데이터베이스: 데이터 저장
 *                                                                   = 메모리 , 파일 , 오아클
 *        : final: 마지막 => 변수(상수), 메소드(종단), 클래스(종단)
 *                           ----------------------------
 *                           있는 그대로 사용
 *    
 *    클래스: public / default => public: 모든 클래스 사용
 *    메소드: public / default / private / protected
 *          => 메소드의 역할: 다른 클래스 통신 (메시지)
 *    생성자: public
 *    멤버변수: private(데이터 보호) => 은닉화
 *            가정 => 메모리에서 보이지 않는다
 *            => 변수: 쓰기(메모리 저장) / 읽기(메모리에서 데이터 가져오기)
 *                    => 메소드로 처리: getter/setter
 *    지역변수: 접근지정어 x => 메소드 안에서만 사용 가능하기 때문
 *            => 상수(final)
 *            
 *     *** 객체지향의 3대 특성(권장사항)
 *         1. 캡슐화: 외부로부터 데이터 보호 / 데이터 손상(id, pwd, ...) 방지
 *                  => 데이터를 감춘다 => 필요한 경우 메소드 기능을 이용햐서 사용 가능하게 만듦
 *         2. 상속: 재사용
 *         3. 다형성: 기능 추가, 기능 변경
 *                   오버 로딩  오버 라이딩
 *         4. 추상화: 중복 제거(공통적인 내용 모아서 관리)
 *                   => 공통 모듈
 */
class Member
{
	private String id;// 안 보임 => Member 클래스 안에서만 / red
	protected String pwd;// 보임 => 같은 폴더 / yellow
	int age;// 보임 => 같은 폴더 / blue
	public String name;// 보임 => 모든 클래스 / green
}
public class 접근지정어_1 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		Member m=new Member();
		
		

	}

}
